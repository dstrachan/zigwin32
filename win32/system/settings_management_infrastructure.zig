//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (62)
//--------------------------------------------------------------------------------
pub const WCM_SETTINGS_ID_NAME = "name";
pub const WCM_SETTINGS_ID_VERSION = "version";
pub const WCM_SETTINGS_ID_LANGUAGE = "language";
pub const WCM_SETTINGS_ID_ARCHITECTURE = "architecture";
pub const WCM_SETTINGS_ID_TOKEN = "token";
pub const WCM_SETTINGS_ID_URI = "uri";
pub const WCM_SETTINGS_ID_VERSION_SCOPE = "versionScope";
pub const WCM_SETTINGS_ID_FLAG_REFERENCE = @as(u32, 0);
pub const WCM_SETTINGS_ID_FLAG_DEFINITION = @as(u32, 1);
pub const LINK_STORE_TO_ENGINE_INSTANCE = @as(u32, 1);
pub const LIMITED_VALIDATION_MODE = @as(u32, 1);
pub const WCM_E_INTERNALERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255424));
pub const WCM_E_STATENODENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255423));
pub const WCM_E_STATENODENOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255422));
pub const WCM_E_ATTRIBUTENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255421));
pub const WCM_E_ATTRIBUTENOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255420));
pub const WCM_E_INVALIDVALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255419));
pub const WCM_E_INVALIDVALUEFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255418));
pub const WCM_E_TYPENOTSPECIFIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255417));
pub const WCM_E_INVALIDDATATYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255416));
pub const WCM_E_NOTPOSITIONED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255415));
pub const WCM_E_READONLYITEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255414));
pub const WCM_E_INVALIDPATH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255413));
pub const WCM_E_WRONGESCAPESTRING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255412));
pub const WCM_E_INVALIDVERSIONFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255411));
pub const WCM_E_INVALIDLANGUAGEFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255410));
pub const WCM_E_KEYNOTCHANGEABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255409));
pub const WCM_E_EXPRESSIONNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255408));
pub const WCM_E_SUBSTITUTIONNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255407));
pub const WCM_E_USERALREADYREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255406));
pub const WCM_E_USERNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255405));
pub const WCM_E_NAMESPACENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255404));
pub const WCM_E_NAMESPACEALREADYREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255403));
pub const WCM_E_STORECORRUPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255402));
pub const WCM_E_INVALIDEXPRESSIONSYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255401));
pub const WCM_E_NOTIFICATIONNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255400));
pub const WCM_E_CONFLICTINGASSERTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255399));
pub const WCM_E_ASSERTIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255398));
pub const WCM_E_DUPLICATENAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255397));
pub const WCM_E_INVALIDKEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255396));
pub const WCM_E_INVALIDSTREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255395));
pub const WCM_E_HANDLERNOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255394));
pub const WCM_E_INVALIDHANDLERSYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255393));
pub const WCM_E_VALIDATIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255392));
pub const WCM_E_RESTRICTIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255391));
pub const WCM_E_MANIFESTCOMPILATIONFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255390));
pub const WCM_E_CYCLICREFERENCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255389));
pub const WCM_E_MIXTYPEASSERTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255388));
pub const WCM_E_NOTSUPPORTEDFUNCTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255387));
pub const WCM_E_VALUETOOBIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255386));
pub const WCM_E_INVALIDATTRIBUTECOMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255385));
pub const WCM_E_ABORTOPERATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255384));
pub const WCM_E_MISSINGCONFIGURATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255383));
pub const WCM_E_INVALIDPROCESSORFORMAT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255382));
pub const WCM_E_SOURCEMANEMPTYVALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145255381));
pub const WCM_S_INTERNALERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232320));
pub const WCM_S_ATTRIBUTENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232321));
pub const WCM_S_LEGACYSETTINGWARNING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232322));
pub const WCM_S_INVALIDATTRIBUTECOMBINATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232324));
pub const WCM_S_ATTRIBUTENOTALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232325));
pub const WCM_S_NAMESPACENOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2232326));
pub const WCM_E_UNKNOWNRESULT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2145251325));

//--------------------------------------------------------------------------------
// Section: Types (16)
//--------------------------------------------------------------------------------
const CLSID_SettingsEngine_Value = Guid.initString("9f7d7bb5-20b3-11da-81a5-0030f1642e3c");
pub const CLSID_SettingsEngine = &CLSID_SettingsEngine_Value;

pub const WcmTargetMode = enum(i32) {
    fflineMode = 1,
    nlineMode = 2,
};
pub const OfflineMode = WcmTargetMode.fflineMode;
pub const OnlineMode = WcmTargetMode.nlineMode;

pub const WcmNamespaceEnumerationFlags = enum(i32) {
    SharedEnumeration = 1,
    UserEnumeration = 2,
    AllEnumeration = 3,
};
pub const SharedEnumeration = WcmNamespaceEnumerationFlags.SharedEnumeration;
pub const UserEnumeration = WcmNamespaceEnumerationFlags.UserEnumeration;
pub const AllEnumeration = WcmNamespaceEnumerationFlags.AllEnumeration;

pub const WcmDataType = enum(i32) {
    Byte = 1,
    SByte = 2,
    UInt16 = 3,
    Int16 = 4,
    UInt32 = 5,
    Int32 = 6,
    UInt64 = 7,
    Int64 = 8,
    Boolean = 11,
    String = 12,
    FlagArray = 32768,
};
pub const dataTypeByte = WcmDataType.Byte;
pub const dataTypeSByte = WcmDataType.SByte;
pub const dataTypeUInt16 = WcmDataType.UInt16;
pub const dataTypeInt16 = WcmDataType.Int16;
pub const dataTypeUInt32 = WcmDataType.UInt32;
pub const dataTypeInt32 = WcmDataType.Int32;
pub const dataTypeUInt64 = WcmDataType.UInt64;
pub const dataTypeInt64 = WcmDataType.Int64;
pub const dataTypeBoolean = WcmDataType.Boolean;
pub const dataTypeString = WcmDataType.String;
pub const dataTypeFlagArray = WcmDataType.FlagArray;

pub const WcmSettingType = enum(i32) {
    Scalar = 1,
    Complex = 2,
    List = 3,
};
pub const settingTypeScalar = WcmSettingType.Scalar;
pub const settingTypeComplex = WcmSettingType.Complex;
pub const settingTypeList = WcmSettingType.List;

pub const WcmRestrictionFacets = enum(i32) {
    MaxLength = 1,
    Enumeration = 2,
    MaxInclusive = 4,
    MinInclusive = 8,
};
pub const restrictionFacetMaxLength = WcmRestrictionFacets.MaxLength;
pub const restrictionFacetEnumeration = WcmRestrictionFacets.Enumeration;
pub const restrictionFacetMaxInclusive = WcmRestrictionFacets.MaxInclusive;
pub const restrictionFacetMinInclusive = WcmRestrictionFacets.MinInclusive;

pub const WcmUserStatus = enum(i32) {
    nknownStatus = 0,
    serRegistered = 1,
    serUnregistered = 2,
    serLoaded = 3,
    serUnloaded = 4,
};
pub const UnknownStatus = WcmUserStatus.nknownStatus;
pub const UserRegistered = WcmUserStatus.serRegistered;
pub const UserUnregistered = WcmUserStatus.serUnregistered;
pub const UserLoaded = WcmUserStatus.serLoaded;
pub const UserUnloaded = WcmUserStatus.serUnloaded;

pub const WcmNamespaceAccess = enum(i32) {
    OnlyAccess = 1,
    WriteAccess = 2,
};
pub const ReadOnlyAccess = WcmNamespaceAccess.OnlyAccess;
pub const ReadWriteAccess = WcmNamespaceAccess.WriteAccess;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IItemEnumerator_Value = Guid.initString("9f7d7bb7-20b3-11da-81a5-0030f1642e3c");
pub const IID_IItemEnumerator = &IID_IItemEnumerator_Value;
pub const IItemEnumerator = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Current: *const fn (
            self: *const IItemEnumerator,
            Item: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        MoveNext: *const fn (
            self: *const IItemEnumerator,
            ItemValid: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Reset: *const fn (
            self: *const IItemEnumerator,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn Current(self: *const IItemEnumerator, Item: ?*VARIANT) HRESULT {
        return self.vtable.Current(self, Item);
    }
    pub inline fn MoveNext(self: *const IItemEnumerator, ItemValid: ?*BOOL) HRESULT {
        return self.vtable.MoveNext(self, ItemValid);
    }
    pub inline fn Reset(self: *const IItemEnumerator) HRESULT {
        return self.vtable.Reset(self);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsIdentity_Value = Guid.initString("9f7d7bb6-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsIdentity = &IID_ISettingsIdentity_Value;
pub const ISettingsIdentity = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttribute: *const fn (
            self: *const ISettingsIdentity,
            Reserved: ?*anyopaque,
            Name: ?[*:0]const u16,
            Value: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetAttribute: *const fn (
            self: *const ISettingsIdentity,
            Reserved: ?*anyopaque,
            Name: ?[*:0]const u16,
            Value: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetFlags: *const fn (
            self: *const ISettingsIdentity,
            Flags: ?*u32,
        ) callconv(.winapi) HRESULT,
        SetFlags: *const fn (
            self: *const ISettingsIdentity,
            Flags: u32,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn GetAttribute(self: *const ISettingsIdentity, Reserved: ?*anyopaque, Name: ?[*:0]const u16, Value: ?*?BSTR) HRESULT {
        return self.vtable.GetAttribute(self, Reserved, Name, Value);
    }
    pub inline fn SetAttribute(self: *const ISettingsIdentity, Reserved: ?*anyopaque, Name: ?[*:0]const u16, Value: ?[*:0]const u16) HRESULT {
        return self.vtable.SetAttribute(self, Reserved, Name, Value);
    }
    pub inline fn GetFlags(self: *const ISettingsIdentity, Flags: ?*u32) HRESULT {
        return self.vtable.GetFlags(self, Flags);
    }
    pub inline fn SetFlags(self: *const ISettingsIdentity, Flags: u32) HRESULT {
        return self.vtable.SetFlags(self, Flags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITargetInfo_Value = Guid.initString("9f7d7bb8-20b3-11da-81a5-0030f1642e3c");
pub const IID_ITargetInfo = &IID_ITargetInfo_Value;
pub const ITargetInfo = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTargetMode: *const fn (
            self: *const ITargetInfo,
            TargetMode: ?*WcmTargetMode,
        ) callconv(.winapi) HRESULT,
        SetTargetMode: *const fn (
            self: *const ITargetInfo,
            TargetMode: WcmTargetMode,
        ) callconv(.winapi) HRESULT,
        GetTemporaryStoreLocation: *const fn (
            self: *const ITargetInfo,
            TemporaryStoreLocation: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetTemporaryStoreLocation: *const fn (
            self: *const ITargetInfo,
            TemporaryStoreLocation: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetTargetID: *const fn (
            self: *const ITargetInfo,
            TargetID: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetTargetID: *const fn (
            self: *const ITargetInfo,
            TargetID: Guid,
        ) callconv(.winapi) HRESULT,
        GetTargetProcessorArchitecture: *const fn (
            self: *const ITargetInfo,
            ProcessorArchitecture: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetTargetProcessorArchitecture: *const fn (
            self: *const ITargetInfo,
            ProcessorArchitecture: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetProperty: *const fn (
            self: *const ITargetInfo,
            Offline: BOOL,
            Property: ?[*:0]const u16,
            Value: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetProperty: *const fn (
            self: *const ITargetInfo,
            Offline: BOOL,
            Property: ?[*:0]const u16,
            Value: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetEnumerator: *const fn (
            self: *const ITargetInfo,
            Enumerator: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        ExpandTarget: *const fn (
            self: *const ITargetInfo,
            Offline: BOOL,
            Location: ?[*:0]const u16,
            ExpandedLocation: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        ExpandTargetPath: *const fn (
            self: *const ITargetInfo,
            Offline: BOOL,
            Location: ?[*:0]const u16,
            ExpandedLocation: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetModulePath: *const fn (
            self: *const ITargetInfo,
            Module: ?[*:0]const u16,
            Path: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        LoadModule: *const fn (
            self: *const ITargetInfo,
            Module: ?[*:0]const u16,
            ModuleHandle: ?*?HINSTANCE,
        ) callconv(.winapi) HRESULT,
        SetWow64Context: *const fn (
            self: *const ITargetInfo,
            InstallerModule: ?[*:0]const u16,
            Wow64Context: ?*u8,
        ) callconv(.winapi) HRESULT,
        TranslateWow64: *const fn (
            self: *const ITargetInfo,
            ClientArchitecture: ?[*:0]const u16,
            Value: ?[*:0]const u16,
            TranslatedValue: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetSchemaHiveLocation: *const fn (
            self: *const ITargetInfo,
            pwzHiveDir: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetSchemaHiveLocation: *const fn (
            self: *const ITargetInfo,
            pHiveLocation: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        SetSchemaHiveMountName: *const fn (
            self: *const ITargetInfo,
            pwzMountName: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetSchemaHiveMountName: *const fn (
            self: *const ITargetInfo,
            pMountName: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn GetTargetMode(self: *const ITargetInfo, TargetMode: ?*WcmTargetMode) HRESULT {
        return self.vtable.GetTargetMode(self, TargetMode);
    }
    pub inline fn SetTargetMode(self: *const ITargetInfo, TargetMode: WcmTargetMode) HRESULT {
        return self.vtable.SetTargetMode(self, TargetMode);
    }
    pub inline fn GetTemporaryStoreLocation(self: *const ITargetInfo, TemporaryStoreLocation: ?*?BSTR) HRESULT {
        return self.vtable.GetTemporaryStoreLocation(self, TemporaryStoreLocation);
    }
    pub inline fn SetTemporaryStoreLocation(self: *const ITargetInfo, TemporaryStoreLocation: ?[*:0]const u16) HRESULT {
        return self.vtable.SetTemporaryStoreLocation(self, TemporaryStoreLocation);
    }
    pub inline fn GetTargetID(self: *const ITargetInfo, TargetID: ?*?BSTR) HRESULT {
        return self.vtable.GetTargetID(self, TargetID);
    }
    pub inline fn SetTargetID(self: *const ITargetInfo, TargetID: Guid) HRESULT {
        return self.vtable.SetTargetID(self, TargetID);
    }
    pub inline fn GetTargetProcessorArchitecture(self: *const ITargetInfo, ProcessorArchitecture: ?*?BSTR) HRESULT {
        return self.vtable.GetTargetProcessorArchitecture(self, ProcessorArchitecture);
    }
    pub inline fn SetTargetProcessorArchitecture(self: *const ITargetInfo, ProcessorArchitecture: ?[*:0]const u16) HRESULT {
        return self.vtable.SetTargetProcessorArchitecture(self, ProcessorArchitecture);
    }
    pub inline fn GetProperty(self: *const ITargetInfo, Offline: BOOL, Property: ?[*:0]const u16, Value: ?*?BSTR) HRESULT {
        return self.vtable.GetProperty(self, Offline, Property, Value);
    }
    pub inline fn SetProperty(self: *const ITargetInfo, Offline: BOOL, Property: ?[*:0]const u16, Value: ?[*:0]const u16) HRESULT {
        return self.vtable.SetProperty(self, Offline, Property, Value);
    }
    pub inline fn GetEnumerator(self: *const ITargetInfo, Enumerator: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.GetEnumerator(self, Enumerator);
    }
    pub inline fn ExpandTarget(self: *const ITargetInfo, Offline: BOOL, Location: ?[*:0]const u16, ExpandedLocation: ?*?BSTR) HRESULT {
        return self.vtable.ExpandTarget(self, Offline, Location, ExpandedLocation);
    }
    pub inline fn ExpandTargetPath(self: *const ITargetInfo, Offline: BOOL, Location: ?[*:0]const u16, ExpandedLocation: ?*?BSTR) HRESULT {
        return self.vtable.ExpandTargetPath(self, Offline, Location, ExpandedLocation);
    }
    pub inline fn SetModulePath(self: *const ITargetInfo, Module: ?[*:0]const u16, Path: ?[*:0]const u16) HRESULT {
        return self.vtable.SetModulePath(self, Module, Path);
    }
    pub inline fn LoadModule(self: *const ITargetInfo, Module: ?[*:0]const u16, ModuleHandle: ?*?HINSTANCE) HRESULT {
        return self.vtable.LoadModule(self, Module, ModuleHandle);
    }
    pub inline fn SetWow64Context(self: *const ITargetInfo, InstallerModule: ?[*:0]const u16, Wow64Context: ?*u8) HRESULT {
        return self.vtable.SetWow64Context(self, InstallerModule, Wow64Context);
    }
    pub inline fn TranslateWow64(self: *const ITargetInfo, ClientArchitecture: ?[*:0]const u16, Value: ?[*:0]const u16, TranslatedValue: ?*?BSTR) HRESULT {
        return self.vtable.TranslateWow64(self, ClientArchitecture, Value, TranslatedValue);
    }
    pub inline fn SetSchemaHiveLocation(self: *const ITargetInfo, pwzHiveDir: ?[*:0]const u16) HRESULT {
        return self.vtable.SetSchemaHiveLocation(self, pwzHiveDir);
    }
    pub inline fn GetSchemaHiveLocation(self: *const ITargetInfo, pHiveLocation: ?*?BSTR) HRESULT {
        return self.vtable.GetSchemaHiveLocation(self, pHiveLocation);
    }
    pub inline fn SetSchemaHiveMountName(self: *const ITargetInfo, pwzMountName: ?[*:0]const u16) HRESULT {
        return self.vtable.SetSchemaHiveMountName(self, pwzMountName);
    }
    pub inline fn GetSchemaHiveMountName(self: *const ITargetInfo, pMountName: ?*?BSTR) HRESULT {
        return self.vtable.GetSchemaHiveMountName(self, pMountName);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsEngine_Value = Guid.initString("9f7d7bb9-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsEngine = &IID_ISettingsEngine_Value;
pub const ISettingsEngine = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamespaces: *const fn (
            self: *const ISettingsEngine,
            Flags: WcmNamespaceEnumerationFlags,
            Reserved: ?*anyopaque,
            Namespaces: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        GetNamespace: *const fn (
            self: *const ISettingsEngine,
            SettingsID: ?*ISettingsIdentity,
            Access: WcmNamespaceAccess,
            Reserved: ?*anyopaque,
            NamespaceItem: ?*?*ISettingsNamespace,
        ) callconv(.winapi) HRESULT,
        GetErrorDescription: *const fn (
            self: *const ISettingsEngine,
            HResult: i32,
            Message: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        CreateSettingsIdentity: *const fn (
            self: *const ISettingsEngine,
            SettingsID: ?*?*ISettingsIdentity,
        ) callconv(.winapi) HRESULT,
        GetStoreStatus: *const fn (
            self: *const ISettingsEngine,
            Reserved: ?*anyopaque,
            Status: ?*WcmUserStatus,
        ) callconv(.winapi) HRESULT,
        LoadStore: *const fn (
            self: *const ISettingsEngine,
            Flags: u32,
        ) callconv(.winapi) HRESULT,
        UnloadStore: *const fn (
            self: *const ISettingsEngine,
            Reserved: ?*anyopaque,
        ) callconv(.winapi) HRESULT,
        RegisterNamespace: *const fn (
            self: *const ISettingsEngine,
            SettingsID: ?*ISettingsIdentity,
            Stream: ?*IStream,
            PushSettings: BOOL,
            Results: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        UnregisterNamespace: *const fn (
            self: *const ISettingsEngine,
            SettingsID: ?*ISettingsIdentity,
            RemoveSettings: BOOL,
        ) callconv(.winapi) HRESULT,
        CreateTargetInfo: *const fn (
            self: *const ISettingsEngine,
            Target: ?*?*ITargetInfo,
        ) callconv(.winapi) HRESULT,
        GetTargetInfo: *const fn (
            self: *const ISettingsEngine,
            Target: ?*?*ITargetInfo,
        ) callconv(.winapi) HRESULT,
        SetTargetInfo: *const fn (
            self: *const ISettingsEngine,
            Target: ?*ITargetInfo,
        ) callconv(.winapi) HRESULT,
        CreateSettingsContext: *const fn (
            self: *const ISettingsEngine,
            Flags: u32,
            Reserved: ?*anyopaque,
            SettingsContext: ?*?*ISettingsContext,
        ) callconv(.winapi) HRESULT,
        SetSettingsContext: *const fn (
            self: *const ISettingsEngine,
            SettingsContext: ?*ISettingsContext,
        ) callconv(.winapi) HRESULT,
        ApplySettingsContext: *const fn (
            self: *const ISettingsEngine,
            SettingsContext: ?*ISettingsContext,
            pppwzIdentities: ?*?*?PWSTR,
            pcIdentities: ?*usize,
        ) callconv(.winapi) HRESULT,
        GetSettingsContext: *const fn (
            self: *const ISettingsEngine,
            SettingsContext: ?*?*ISettingsContext,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn GetNamespaces(self: *const ISettingsEngine, Flags: WcmNamespaceEnumerationFlags, Reserved: ?*anyopaque, Namespaces: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.GetNamespaces(self, Flags, Reserved, Namespaces);
    }
    pub inline fn GetNamespace(self: *const ISettingsEngine, SettingsID: ?*ISettingsIdentity, Access: WcmNamespaceAccess, Reserved: ?*anyopaque, NamespaceItem: ?*?*ISettingsNamespace) HRESULT {
        return self.vtable.GetNamespace(self, SettingsID, Access, Reserved, NamespaceItem);
    }
    pub inline fn GetErrorDescription(self: *const ISettingsEngine, HResult: i32, Message: ?*?BSTR) HRESULT {
        return self.vtable.GetErrorDescription(self, HResult, Message);
    }
    pub inline fn CreateSettingsIdentity(self: *const ISettingsEngine, SettingsID: ?*?*ISettingsIdentity) HRESULT {
        return self.vtable.CreateSettingsIdentity(self, SettingsID);
    }
    pub inline fn GetStoreStatus(self: *const ISettingsEngine, Reserved: ?*anyopaque, Status: ?*WcmUserStatus) HRESULT {
        return self.vtable.GetStoreStatus(self, Reserved, Status);
    }
    pub inline fn LoadStore(self: *const ISettingsEngine, Flags: u32) HRESULT {
        return self.vtable.LoadStore(self, Flags);
    }
    pub inline fn UnloadStore(self: *const ISettingsEngine, Reserved: ?*anyopaque) HRESULT {
        return self.vtable.UnloadStore(self, Reserved);
    }
    pub inline fn RegisterNamespace(self: *const ISettingsEngine, SettingsID: ?*ISettingsIdentity, Stream: ?*IStream, PushSettings: BOOL, Results: ?*VARIANT) HRESULT {
        return self.vtable.RegisterNamespace(self, SettingsID, Stream, PushSettings, Results);
    }
    pub inline fn UnregisterNamespace(self: *const ISettingsEngine, SettingsID: ?*ISettingsIdentity, RemoveSettings: BOOL) HRESULT {
        return self.vtable.UnregisterNamespace(self, SettingsID, RemoveSettings);
    }
    pub inline fn CreateTargetInfo(self: *const ISettingsEngine, Target: ?*?*ITargetInfo) HRESULT {
        return self.vtable.CreateTargetInfo(self, Target);
    }
    pub inline fn GetTargetInfo(self: *const ISettingsEngine, Target: ?*?*ITargetInfo) HRESULT {
        return self.vtable.GetTargetInfo(self, Target);
    }
    pub inline fn SetTargetInfo(self: *const ISettingsEngine, Target: ?*ITargetInfo) HRESULT {
        return self.vtable.SetTargetInfo(self, Target);
    }
    pub inline fn CreateSettingsContext(self: *const ISettingsEngine, Flags: u32, Reserved: ?*anyopaque, SettingsContext: ?*?*ISettingsContext) HRESULT {
        return self.vtable.CreateSettingsContext(self, Flags, Reserved, SettingsContext);
    }
    pub inline fn SetSettingsContext(self: *const ISettingsEngine, SettingsContext: ?*ISettingsContext) HRESULT {
        return self.vtable.SetSettingsContext(self, SettingsContext);
    }
    pub inline fn ApplySettingsContext(self: *const ISettingsEngine, SettingsContext: ?*ISettingsContext, pppwzIdentities: ?*?*?PWSTR, pcIdentities: ?*usize) HRESULT {
        return self.vtable.ApplySettingsContext(self, SettingsContext, pppwzIdentities, pcIdentities);
    }
    pub inline fn GetSettingsContext(self: *const ISettingsEngine, SettingsContext: ?*?*ISettingsContext) HRESULT {
        return self.vtable.GetSettingsContext(self, SettingsContext);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsItem_Value = Guid.initString("9f7d7bbb-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsItem = &IID_ISettingsItem_Value;
pub const ISettingsItem = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const ISettingsItem,
            Name: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetValue: *const fn (
            self: *const ISettingsItem,
            Value: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        SetValue: *const fn (
            self: *const ISettingsItem,
            Value: ?*const VARIANT,
        ) callconv(.winapi) HRESULT,
        GetSettingType: *const fn (
            self: *const ISettingsItem,
            Type: ?*WcmSettingType,
        ) callconv(.winapi) HRESULT,
        GetDataType: *const fn (
            self: *const ISettingsItem,
            Type: ?*WcmDataType,
        ) callconv(.winapi) HRESULT,
        GetValueRaw: *const fn (
            self: *const ISettingsItem,
            Data: [*]?*u8,
            DataSize: ?*u32,
        ) callconv(.winapi) HRESULT,
        SetValueRaw: *const fn (
            self: *const ISettingsItem,
            DataType: i32,
            Data: [*:0]const u8,
            DataSize: u32,
        ) callconv(.winapi) HRESULT,
        HasChild: *const fn (
            self: *const ISettingsItem,
            ItemHasChild: ?*BOOL,
        ) callconv(.winapi) HRESULT,
        Children: *const fn (
            self: *const ISettingsItem,
            Children: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        GetChild: *const fn (
            self: *const ISettingsItem,
            Name: ?[*:0]const u16,
            Child: ?*?*ISettingsItem,
        ) callconv(.winapi) HRESULT,
        GetSettingByPath: *const fn (
            self: *const ISettingsItem,
            Path: ?[*:0]const u16,
            Setting: ?*?*ISettingsItem,
        ) callconv(.winapi) HRESULT,
        CreateSettingByPath: *const fn (
            self: *const ISettingsItem,
            Path: ?[*:0]const u16,
            Setting: ?*?*ISettingsItem,
        ) callconv(.winapi) HRESULT,
        RemoveSettingByPath: *const fn (
            self: *const ISettingsItem,
            Path: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetListKeyInformation: *const fn (
            self: *const ISettingsItem,
            KeyName: ?*?BSTR,
            DataType: ?*WcmDataType,
        ) callconv(.winapi) HRESULT,
        CreateListElement: *const fn (
            self: *const ISettingsItem,
            KeyData: ?*const VARIANT,
            Child: ?*?*ISettingsItem,
        ) callconv(.winapi) HRESULT,
        RemoveListElement: *const fn (
            self: *const ISettingsItem,
            ElementName: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        Attributes: *const fn (
            self: *const ISettingsItem,
            Attributes: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        GetAttribute: *const fn (
            self: *const ISettingsItem,
            Name: ?[*:0]const u16,
            Value: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        GetPath: *const fn (
            self: *const ISettingsItem,
            Path: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetRestrictionFacets: *const fn (
            self: *const ISettingsItem,
            RestrictionFacets: ?*WcmRestrictionFacets,
        ) callconv(.winapi) HRESULT,
        GetRestriction: *const fn (
            self: *const ISettingsItem,
            RestrictionFacet: WcmRestrictionFacets,
            FacetData: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
        GetKeyValue: *const fn (
            self: *const ISettingsItem,
            Value: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn GetName(self: *const ISettingsItem, Name: ?*?BSTR) HRESULT {
        return self.vtable.GetName(self, Name);
    }
    pub inline fn GetValue(self: *const ISettingsItem, Value: ?*VARIANT) HRESULT {
        return self.vtable.GetValue(self, Value);
    }
    pub inline fn SetValue(self: *const ISettingsItem, Value: ?*const VARIANT) HRESULT {
        return self.vtable.SetValue(self, Value);
    }
    pub inline fn GetSettingType(self: *const ISettingsItem, Type: ?*WcmSettingType) HRESULT {
        return self.vtable.GetSettingType(self, Type);
    }
    pub inline fn GetDataType(self: *const ISettingsItem, Type: ?*WcmDataType) HRESULT {
        return self.vtable.GetDataType(self, Type);
    }
    pub inline fn GetValueRaw(self: *const ISettingsItem, Data: [*]?*u8, DataSize: ?*u32) HRESULT {
        return self.vtable.GetValueRaw(self, Data, DataSize);
    }
    pub inline fn SetValueRaw(self: *const ISettingsItem, DataType: i32, Data: [*:0]const u8, DataSize: u32) HRESULT {
        return self.vtable.SetValueRaw(self, DataType, Data, DataSize);
    }
    pub inline fn HasChild(self: *const ISettingsItem, ItemHasChild: ?*BOOL) HRESULT {
        return self.vtable.HasChild(self, ItemHasChild);
    }
    pub inline fn Children(self: *const ISettingsItem, _param_Children: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.Children(self, _param_Children);
    }
    pub inline fn GetChild(self: *const ISettingsItem, Name: ?[*:0]const u16, Child: ?*?*ISettingsItem) HRESULT {
        return self.vtable.GetChild(self, Name, Child);
    }
    pub inline fn GetSettingByPath(self: *const ISettingsItem, Path: ?[*:0]const u16, Setting: ?*?*ISettingsItem) HRESULT {
        return self.vtable.GetSettingByPath(self, Path, Setting);
    }
    pub inline fn CreateSettingByPath(self: *const ISettingsItem, Path: ?[*:0]const u16, Setting: ?*?*ISettingsItem) HRESULT {
        return self.vtable.CreateSettingByPath(self, Path, Setting);
    }
    pub inline fn RemoveSettingByPath(self: *const ISettingsItem, Path: ?[*:0]const u16) HRESULT {
        return self.vtable.RemoveSettingByPath(self, Path);
    }
    pub inline fn GetListKeyInformation(self: *const ISettingsItem, KeyName: ?*?BSTR, DataType: ?*WcmDataType) HRESULT {
        return self.vtable.GetListKeyInformation(self, KeyName, DataType);
    }
    pub inline fn CreateListElement(self: *const ISettingsItem, KeyData: ?*const VARIANT, Child: ?*?*ISettingsItem) HRESULT {
        return self.vtable.CreateListElement(self, KeyData, Child);
    }
    pub inline fn RemoveListElement(self: *const ISettingsItem, ElementName: ?[*:0]const u16) HRESULT {
        return self.vtable.RemoveListElement(self, ElementName);
    }
    pub inline fn Attributes(self: *const ISettingsItem, _param_Attributes: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.Attributes(self, _param_Attributes);
    }
    pub inline fn GetAttribute(self: *const ISettingsItem, Name: ?[*:0]const u16, Value: ?*VARIANT) HRESULT {
        return self.vtable.GetAttribute(self, Name, Value);
    }
    pub inline fn GetPath(self: *const ISettingsItem, Path: ?*?BSTR) HRESULT {
        return self.vtable.GetPath(self, Path);
    }
    pub inline fn GetRestrictionFacets(self: *const ISettingsItem, RestrictionFacets: ?*WcmRestrictionFacets) HRESULT {
        return self.vtable.GetRestrictionFacets(self, RestrictionFacets);
    }
    pub inline fn GetRestriction(self: *const ISettingsItem, RestrictionFacet: WcmRestrictionFacets, FacetData: ?*VARIANT) HRESULT {
        return self.vtable.GetRestriction(self, RestrictionFacet, FacetData);
    }
    pub inline fn GetKeyValue(self: *const ISettingsItem, Value: ?*VARIANT) HRESULT {
        return self.vtable.GetKeyValue(self, Value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsNamespace_Value = Guid.initString("9f7d7bba-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsNamespace = &IID_ISettingsNamespace_Value;
pub const ISettingsNamespace = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdentity: *const fn (
            self: *const ISettingsNamespace,
            SettingsID: ?*?*ISettingsIdentity,
        ) callconv(.winapi) HRESULT,
        Settings: *const fn (
            self: *const ISettingsNamespace,
            Settings: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        Save: *const fn (
            self: *const ISettingsNamespace,
            PushSettings: BOOL,
            Result: ?*?*ISettingsResult,
        ) callconv(.winapi) HRESULT,
        GetSettingByPath: *const fn (
            self: *const ISettingsNamespace,
            Path: ?[*:0]const u16,
            Setting: ?*?*ISettingsItem,
        ) callconv(.winapi) HRESULT,
        CreateSettingByPath: *const fn (
            self: *const ISettingsNamespace,
            Path: ?[*:0]const u16,
            Setting: ?*?*ISettingsItem,
        ) callconv(.winapi) HRESULT,
        RemoveSettingByPath: *const fn (
            self: *const ISettingsNamespace,
            Path: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
        GetAttribute: *const fn (
            self: *const ISettingsNamespace,
            Name: ?[*:0]const u16,
            Value: ?*VARIANT,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn GetIdentity(self: *const ISettingsNamespace, SettingsID: ?*?*ISettingsIdentity) HRESULT {
        return self.vtable.GetIdentity(self, SettingsID);
    }
    pub inline fn Settings(self: *const ISettingsNamespace, _param_Settings: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.Settings(self, _param_Settings);
    }
    pub inline fn Save(self: *const ISettingsNamespace, PushSettings: BOOL, Result: ?*?*ISettingsResult) HRESULT {
        return self.vtable.Save(self, PushSettings, Result);
    }
    pub inline fn GetSettingByPath(self: *const ISettingsNamespace, Path: ?[*:0]const u16, Setting: ?*?*ISettingsItem) HRESULT {
        return self.vtable.GetSettingByPath(self, Path, Setting);
    }
    pub inline fn CreateSettingByPath(self: *const ISettingsNamespace, Path: ?[*:0]const u16, Setting: ?*?*ISettingsItem) HRESULT {
        return self.vtable.CreateSettingByPath(self, Path, Setting);
    }
    pub inline fn RemoveSettingByPath(self: *const ISettingsNamespace, Path: ?[*:0]const u16) HRESULT {
        return self.vtable.RemoveSettingByPath(self, Path);
    }
    pub inline fn GetAttribute(self: *const ISettingsNamespace, Name: ?[*:0]const u16, Value: ?*VARIANT) HRESULT {
        return self.vtable.GetAttribute(self, Name, Value);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsResult_Value = Guid.initString("9f7d7bbc-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsResult = &IID_ISettingsResult_Value;
pub const ISettingsResult = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDescription: *const fn (
            self: *const ISettingsResult,
            description: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetErrorCode: *const fn (
            self: *const ISettingsResult,
            hrOut: ?*HRESULT,
        ) callconv(.winapi) HRESULT,
        GetContextDescription: *const fn (
            self: *const ISettingsResult,
            description: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
        GetLine: *const fn (
            self: *const ISettingsResult,
            dwLine: ?*u32,
        ) callconv(.winapi) HRESULT,
        GetColumn: *const fn (
            self: *const ISettingsResult,
            dwColumn: ?*u32,
        ) callconv(.winapi) HRESULT,
        GetSource: *const fn (
            self: *const ISettingsResult,
            file: ?*?BSTR,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn GetDescription(self: *const ISettingsResult, description: ?*?BSTR) HRESULT {
        return self.vtable.GetDescription(self, description);
    }
    pub inline fn GetErrorCode(self: *const ISettingsResult, hrOut: ?*HRESULT) HRESULT {
        return self.vtable.GetErrorCode(self, hrOut);
    }
    pub inline fn GetContextDescription(self: *const ISettingsResult, description: ?*?BSTR) HRESULT {
        return self.vtable.GetContextDescription(self, description);
    }
    pub inline fn GetLine(self: *const ISettingsResult, dwLine: ?*u32) HRESULT {
        return self.vtable.GetLine(self, dwLine);
    }
    pub inline fn GetColumn(self: *const ISettingsResult, dwColumn: ?*u32) HRESULT {
        return self.vtable.GetColumn(self, dwColumn);
    }
    pub inline fn GetSource(self: *const ISettingsResult, file: ?*?BSTR) HRESULT {
        return self.vtable.GetSource(self, file);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISettingsContext_Value = Guid.initString("9f7d7bbd-20b3-11da-81a5-0030f1642e3c");
pub const IID_ISettingsContext = &IID_ISettingsContext_Value;
pub const ISettingsContext = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Serialize: *const fn (
            self: *const ISettingsContext,
            pStream: ?*IStream,
            pTarget: ?*ITargetInfo,
        ) callconv(.winapi) HRESULT,
        Deserialize: *const fn (
            self: *const ISettingsContext,
            pStream: ?*IStream,
            pTarget: ?*ITargetInfo,
            pppResults: [*]?*?*ISettingsResult,
            pcResultCount: ?*usize,
        ) callconv(.winapi) HRESULT,
        SetUserData: *const fn (
            self: *const ISettingsContext,
            pUserData: ?*anyopaque,
        ) callconv(.winapi) HRESULT,
        GetUserData: *const fn (
            self: *const ISettingsContext,
            pUserData: ?*?*anyopaque,
        ) callconv(.winapi) HRESULT,
        GetNamespaces: *const fn (
            self: *const ISettingsContext,
            ppNamespaceIds: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        GetStoredSettings: *const fn (
            self: *const ISettingsContext,
            pIdentity: ?*ISettingsIdentity,
            ppAddedSettings: ?*?*IItemEnumerator,
            ppModifiedSettings: ?*?*IItemEnumerator,
            ppDeletedSettings: ?*?*IItemEnumerator,
        ) callconv(.winapi) HRESULT,
        RevertSetting: *const fn (
            self: *const ISettingsContext,
            pIdentity: ?*ISettingsIdentity,
            pwzSetting: ?[*:0]const u16,
        ) callconv(.winapi) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub inline fn Serialize(self: *const ISettingsContext, pStream: ?*IStream, pTarget: ?*ITargetInfo) HRESULT {
        return self.vtable.Serialize(self, pStream, pTarget);
    }
    pub inline fn Deserialize(self: *const ISettingsContext, pStream: ?*IStream, pTarget: ?*ITargetInfo, pppResults: [*]?*?*ISettingsResult, pcResultCount: ?*usize) HRESULT {
        return self.vtable.Deserialize(self, pStream, pTarget, pppResults, pcResultCount);
    }
    pub inline fn SetUserData(self: *const ISettingsContext, pUserData: ?*anyopaque) HRESULT {
        return self.vtable.SetUserData(self, pUserData);
    }
    pub inline fn GetUserData(self: *const ISettingsContext, pUserData: ?*?*anyopaque) HRESULT {
        return self.vtable.GetUserData(self, pUserData);
    }
    pub inline fn GetNamespaces(self: *const ISettingsContext, ppNamespaceIds: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.GetNamespaces(self, ppNamespaceIds);
    }
    pub inline fn GetStoredSettings(self: *const ISettingsContext, pIdentity: ?*ISettingsIdentity, ppAddedSettings: ?*?*IItemEnumerator, ppModifiedSettings: ?*?*IItemEnumerator, ppDeletedSettings: ?*?*IItemEnumerator) HRESULT {
        return self.vtable.GetStoredSettings(self, pIdentity, ppAddedSettings, ppModifiedSettings, ppDeletedSettings);
    }
    pub inline fn RevertSetting(self: *const ISettingsContext, pIdentity: ?*ISettingsIdentity, pwzSetting: ?[*:0]const u16) HRESULT {
        return self.vtable.RevertSetting(self, pIdentity, pwzSetting);
    }
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
